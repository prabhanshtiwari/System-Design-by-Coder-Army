
UML Diagrams

Explaination of idea of Application:
1. using paragraphs
2. Diagrams


Types of UML Diagrams:
1. Structural(static)
2. Behavioural(dynamic)


Structural UML Diagrams:
- used to show the structure of your application
- it show the staticc interface of app



Behavioural UML Diagrams:
- it shows how the objects are interacting with each other


We have 14 UML diagrams:
- 7 are structural
- other 7 are behavioural
- we need to study only two UML diagrams, which will cover all LLD portion


We will study:
- class diagrams(structural)
- sequence diagrams(behavioural)


Class Diagrams:
- it tells what are the classes that will be in the App
- it also tells how these classes are associated with eachother


In class diagrams, we study:
1. class structure
2. Associations/connections


In a class,
- characteristics == class variables
- behaviour == class methods


class Car {
    String brand;
    String model;
    int engineCC;

    void startEngine();
    void stopEngine();
    accelerate();
    void brake();
}


How to represent this class using class structure?
-

+-------------------------+
|          Car           |  <-- Class Name
+-------------------------+
| - brand: String        |  <-- Attributes (fields)
| - model: String        |
| - engineCC: int        |
+-------------------------+
| + startEngine(): void  |  <-- Methods
| + stopEngine(): void   |
| + accelerate(): void   |
| + brake(): void        |
+-------------------------+

Legend:

+ ‚Üí public

- ‚Üí private

# ‚Üí protected (not used here)

attributeName: Type ‚Üí field format

methodName(): returnType ‚Üí method format


Access Modifiers:

+-------------------------------------------------------------------------------+
            |   Within class    |   from child class    |   outside the class   |
+-------------------------------------------------------------------------------+
Public      |   can access      |   can access          |   can access          |   --> (+)
+-------------------------------------------------------------------------------+
Protected   |   can access      |   can access          |   can't access        |   --> (-)
+-------------------------------------------------------------------------------+
Private     |   can access      |   can't access        |   can't access        |   --> (#)   
+-------------------------------------------------------------------------------+



Classes are of two types:
1. Abstract class - body is not defined for methods
2. Concrete class - body is defined for methods


Representing abstract class using class structure:
+----------------------------------+
| <<abstract>> Car                 |   <-- class name in *italics* or
+----------------------------------+       with the stereotype ¬´abstract¬ª
| # brand    : String              |   <-- typical fields
| # model    : String              |
| # engineCC : int                 |
+----------------------------------+
| + startEngine()  : void {abstract} |
| + stopEngine()   : void {abstract} |
| + accelerate()   : void {abstract} |
| + brake()        : void {abstract} |
+----------------------------------+


Note: You do NOT need to write "concrete" anywhere. If a class is not abstract, it is automatically assumed to be concrete.



Generic UML class structure:

+--------------------------+
| ClassName                |   <-- Name of the class
+--------------------------+
| - attribute1 : Type      |   <-- Private field
| # attribute2 : Type      |   <-- Protected field
| + attribute3 : Type      |   <-- Public field
+--------------------------+
| + method1(param: Type) : ReturnType   |   <-- Public method
| - method2() : ReturnType              |   <-- Private method
| # method3() : ReturnType              |   <-- Protected method
+--------------------------+




Associations in UML(class relationships):
- two classes are connected with eachother
- Associations describe how classes are related to each other
- it is LLD specific concept


Types of Associations:
1. **Class Association**
    a. Inheritence
2. **Object Association**
    a. Simple Association
    b. Aggregation
    c. Composition



Inheritence in Class Association:
In UML, inheritance means one class (child) inherits from another class (parent). This is also called a:
- Generalization (UML term)
- IS-A relationship (conceptual term)
- Inheritance (Java/OOP term)


class A{
    method1();
}
class B: public A{
    method2();
}
main() {
    B *  b = new B();
    b->method1();
    b->method2();
}


IS-A relationship:
- The IS-A relationship means that one class is a specialized type of another class.
- It represents inheritance or generalization in object-oriented programming.
- If class B "IS-A" class A, then B inherits from A and can be used wherever A is expected.

Example:
- Dog IS-A Animal ‚Äî because a dog is a kind of animal.

- Car IS-A Vehicle ‚Äî because a car is a type of vehicle.


How to Represent Inheritance (Generalization) in UML
- Inheritance is shown as a solid line with a hollow triangle arrowhead pointing to the parent (superclass).
- The arrow goes from the child class to the parent class.


Example:
If Dog inherits from Animal:

Animal <|----- Dog

- Dog ‚Äî subclass (child)
- Animal ‚Äî superclass (parent)
- Arrow points to Animal showing that Dog is a type of Animal.




Composition;
- (HAS-A) realationship



Types of Composition:
1. Simple Associations
2. Aggregation
3. 



Simple Association:
- In UML (Unified Modeling Language), a simple association refers to a basic relationship between two classes that indicates they are connected in some way, but without any ownership (unlike composition or aggregation).




Aggregation:
Aggregation is a "whole-part" relationship between classes in UML. It represents a weaker form of ownership than composition. It means that:
- One class (whole) is made up of, or uses, objects of another class (part).
- The part can exist independently of the whole.
 
 Imagine a Department and Professor relationship:

+-------------+<>------------+------------+
| Department  |    1         | Professor  |
+-------------+              +------------+
| name        |              | name       |
+-------------+              +------------+
The Department has Professors.
But a Professor can exist even if the Department is deleted (e.g., transferred to another department).
The hollow diamond near Department indicates aggregation.




Composition:
Composition is a stronger form of aggregation in UML. It represents a "part-of" relationship where:
- The part cannot exist independently of the whole.
- The whole is responsible for the lifecycle of the part.


Consider a House and Room relationship:

+-------+‚óÜ------------+------+
| House |   1         | Room |
+-------+             +------+
| addr  |             | type |
+-------+             +------+

- A House is composed of one or more Rooms.
- A Room cannot exist independently of a House.
- The filled diamond on the House side means composition.



class A {
    method1();
}
class B {
    A * a;

    B() {
        a = new A();
    }
    method2();
}
main() {
    B * b = new B();
    b->method2();
    b->a->method1();
}



Note: Composition plays important role in LLD.


Asssignment:
- Make class diagram of the given scenario
CAR
- Manual Car
    - changeGear();
- Electric Car
    - chargeBattery();



Conclusion for class diagram:
- 







Sequence Diagrams:
- behavioural diagram
- tells about interaction among classes


Representation of objects in sequence diagram:
- 
+-----+     +-----+     +-----+     +-----+
|  a  |     |  b  |     |  c  |     |  d  |
+-----+     +-----+     +-----+     +-----+



Lifeline:
- A lifeline represents the existence of an object or actor over time during the interaction.
- It is drawn as a vertical dashed line that extends downward from the object‚Äôs box.
- The lifeline shows the object is ‚Äúalive‚Äù and able to send or receive messages during the scenario.
- The length of the lifeline represents the duration the object participates in the process.

+-----+
|  a  |   <--- Object box
+-----+
   |
   |   <--- Lifeline (vertical dashed line)
   |
   |



Activation Bar (Execution Occurrence):
- It‚Äôs a narrow vertical rectangle drawn on the lifeline of an object.
- Represents the period when an object is active, i.e., executing a process or method.
- Shows the time during which the object is performing an action or waiting for a response.
- Helps visualize when and how long an object is busy in the interaction.

+-----+
|  a  |
+-----+
   |
   |   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   <-- Activation bar on lifeline
   |   |     |
   |   |     |
   |   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
   |



Message in a Sequence Diagram:
- A message represents communication or interaction between two objects.
- It is shown as a horizontal arrow going from the sender‚Äôs lifeline to the receiver‚Äôs lifeline.
- Messages usually correspond to method calls, signals, or data transfers.
- The arrow is labeled with the name of the message or method being invoked.

Types of message:
- Async
- Sync



Create Message:
- Represents the creation (instantiation) of an object during the interaction.
- Shown as a dashed arrow with an open arrowhead pointing to the bottom of the lifeline of the newly created object.
- The lifeline of the object starts at the point where it is created.

üîπ Destroy Message:
- Represents the termination or destruction of an object.
- Shown as a large X at the end of the lifeline where the object is destroyed.
- Sometimes preceded by a destroy message arrow (dashed line with open arrow) pointing to the object being destroyed.




Lost Message:
- A message sent to an unknown or unspecified receiver ‚Äî the receiver is not shown in the diagram.
- Represented as an arrow pointing to nowhere or outside the diagram boundary.
- It means the sender sends a message but the receiver is unknown, outside the system, or not modeled.


üîé Found Message:
- A message that comes from an unknown or unspecified sender into the system.
- Represented as an arrow coming from nowhere or outside into an object inside the diagram.
- It means the receiver gets a message from an external or unknown source.






How to draw sequence diagrams?
- 






